{"version":3,"sources":["components/xmlCounter.js","App.js","serviceWorker.js","index.js"],"names":["XmlCounter","props","submitClick","setState","tagCount","i","fileInput","current","files","length","reader","FileReader","readAsText","onloadend","evt","readerData","target","result","tagArray","XMLParser","parseFromString","getElementsByTagName","state","tagName","onFilePathChanged","event","filePath","value","onTagChange","printXmlCount","type","multiple","ref","onChange","onClick","React","createRef","this","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8MAEqBA,E,kDACpB,WAAYC,GAAQ,IAAD,8BAClB,cAAMA,IAQPC,YAAc,WACb,EAAKC,SAAS,CACbC,SAAU,IAEX,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAKC,UAAUC,QAAQC,MAAMC,OAAQJ,IAAK,CAC7D,IAAMK,EAAS,IAAIC,WACnBD,EAAOE,WAAW,EAAKN,UAAUC,QAAQC,MAAMH,IAC/CK,EAAOG,UAAY,SAACC,GACP,IAAMC,EAAaD,EAAIE,OAAOC,OAExBC,GADM,IAAIC,KAAYC,gBAAgBL,GACvBM,qBAAqB,EAAKC,MAAMC,SACjE,EAAKpB,SAAS,CACbC,SAAU,EAAKkB,MAAMlB,SAAWc,EAAST,YArB1B,EA2BnBe,kBAAoB,SAACC,GACpB,EAAKtB,SAAS,CACbuB,SAAUD,EAAMT,OAAOW,SA7BN,EAiCnBC,YAAc,SAACH,GACd,EAAKtB,SAAS,CACboB,QAASE,EAAMT,OAAOW,SAnCL,EAuCnBE,cAAgB,WACf,OACC,8BACC,qCACA,iDACA,2BAAOC,KAAK,OAAOC,UAAQ,EAACC,IAAK,EAAK1B,YACtC,6BACA,iDACA,2BAAOwB,KAAK,OAAOH,MAAO,EAAKL,MAAMC,QAASU,SAAU,EAAKL,cAC7D,2BAAOE,KAAK,SAASH,MAAM,SAASO,QAAS,EAAKhC,cAClD,sCAAY,EAAKoB,MAAMlB,YA/CzB,EAAKkB,MAAQ,CACZlB,SAAU,EACVmB,QAAS,IAEV,EAAKjB,UAAY6B,IAAMC,YANL,E,qDAuDlB,OAAO,6BAAMC,KAAKR,qB,GAxDoBS,aCQzBC,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCOcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.fdd8d4b1.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport XMLParser from 'react-xml-parser';\r\nexport default class XmlCounter extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\ttagCount: 0,\r\n\t\t\ttagName: '',\r\n\t\t};\r\n\t\tthis.fileInput = React.createRef();\r\n    }\r\n\r\n\tsubmitClick = () => {\r\n\t\tthis.setState({\r\n\t\t\ttagCount: 0,\r\n\t\t});\r\n\t\tfor (let i = 0; i < this.fileInput.current.files.length; i++) {\r\n\t\t\tconst reader = new FileReader();\r\n\t\t\treader.readAsText(this.fileInput.current.files[i]);\r\n\t\t\treader.onloadend = (evt) => {\r\n                const readerData = evt.target.result;\r\n                const xml = new XMLParser().parseFromString(readerData);\r\n                const tagArray = xml.getElementsByTagName(this.state.tagName);\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\ttagCount: this.state.tagCount + tagArray.length,\r\n\t\t\t\t});\r\n\t\t\t};\r\n\t\t}\r\n\t};\r\n\r\n\tonFilePathChanged = (event) => {\r\n\t\tthis.setState({\r\n\t\t\tfilePath: event.target.value,\r\n\t\t});\r\n\t};\r\n\r\n\tonTagChange = (event) => {\r\n\t\tthis.setState({\r\n\t\t\ttagName: event.target.value,\r\n\t\t});\r\n\t};\r\n\r\n\tprintXmlCount = () => {\r\n\t\treturn (\r\n\t\t\t<form>\r\n\t\t\t\t<h1>Hello</h1>\r\n\t\t\t\t<p>Upload files here:</p>\r\n\t\t\t\t<input type=\"file\" multiple ref={this.fileInput} />\r\n\t\t\t\t<br />\r\n\t\t\t\t<p>Enter tag to count</p>\r\n\t\t\t\t<input type=\"text\" value={this.state.tagName} onChange={this.onTagChange} />\r\n\t\t\t\t<input type=\"button\" value=\"Submit\" onClick={this.submitClick} />\r\n\t\t\t\t<h1>Count: {this.state.tagCount}</h1>\r\n\t\t\t</form>\r\n\t\t);\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn <div>{this.printXmlCount()}</div>;\r\n\t}\r\n}\r\n","import React from 'react';\nimport XmlCounter from './components/xmlCounter';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <XmlCounter />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}